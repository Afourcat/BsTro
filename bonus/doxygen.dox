/** \file calc_engine.h
 * \brief A Documented file.
 *
 * Details.
 */

/**
 * \fn char *calc (pf_tree_t *tree, char *nb_base, char neg)
 * \brief Function that compute each node of the binary tree passed as
 * parameter, using pointers on wrappers for operations.
 * \param tree The binary tree node to be computed.
 * \return The value of the computation of the two last nodes or
 * the value of the node.
 */

/** \file calc.h
 * \brief A Documented file.
 *
 * Details.
 */

/**
 ** \fn char *my_add (char *nb1, char *nb2)
 ** \brief Function that wrap the infin_add function for maintability means.
 ** \param nb1 The nb1 to be passed in the infin_add as second argument
 ** \param nb2 The nb2 to be passed in the infin_add as second argument
 ** \return The result of the infin_add(nb1, nb2).
 */

/**
 * \fn char *my_sub (char *nb1, char *nb2)
 * \brief Function that wrap the infin_sub function for maintability means.
 * \param nb1 The nb1 to be passed in the infin_sub as second argument
 * \param nb2 The nb2 to be passed in the infin_sub as second argument
 * \return The result of the infin_sub(nb1, nb2).
 */

/**
 * \fn char *my_mul (char *nb1, char *nb2)
 * \brief Function that wrap the infin_mul function for maintability means.
 * \param nb1 The nb1 to be passed in the infin_mul as second argument
 * \param nb2 The nb2 to be passed in the infin_mul as second argument
 * \return The result of the infin_mul(nb1, nb2).
 */


/**
 * \fn char *my_div (char *nb1, char *nb2)
 * \brief Function that wrap the infin_div function for maintability means.
 * \param nb1 The nb1 to be passed in the infin_div as second argument
 * \param nb2 The nb2 to be passed in the infin_div as second argument
 * \return The result of the infin_div(nb1, nb2).
 */

/**
 * \fn char *my_mod (char *nb1, char *nb2)
 * \brief Function that wrap the infin_mod function for maintability means.
 * \param nb1 The nb1 to be passed in the infin_mod as second argument
 * \param nb2 The nb2 to be passed in the infin_mod as second argument
 * \return The result of the infin_mod(nb1, nb2).
 */

/** \file convert_base.h
 * \brief A Documented file.
 *
 * Details.
 */

/**
 * \fn char* convert_base (char *str, char *base, char neg, int bools)
 * \brief Function that converts a string from a base to another base.
 * \param str The string to be converted.
 * \param base The base in which or from the string has to be converted
 * \param neg The character that acts as a negative character
 * \param bools A boolean that tells the function if it should convert from
 * base to dec (0), or from dec to base (1).
 * \return The converted string.
 */

/**
 * \fn char* get_base_to_dec (char *str, char *base)
 * \brief Function that converts a string from a base to the decimal base
 * \param str The string to be converted in decimal base
 * \param base The base from which the string has to be converted.
 * \return The converted string in the decimal base.
 */

/**
 * \fn char* get_dec_to_base (char *str, char *base)
 * \brief Function that converts a string from a decimal base to the specified
 * base.
 * \param str The string to be converted in the specified base.
 * \param base The base to which the string has to be converted.
 * \return The converted string in the specified base.
 */

/** \file error.h
 * \brief A Documented file.
 *
 * Details.
 */

/**
 * \fn void my_putchar_error (char c)
 * \brief Function that displays the character c on the STDERR.
 * \param c The char to be displayed.
 */

/**
 * \fn int my_putstr_error (char *str)
 * \brief Function that displays a string, characters by characters usig
 * my_putchar_error.
 * \param str The string to be displayed.
 * \return EXIT_SUCCESS.
 */

/**
 * \fn int check_syntax (char *str, char *operands, char *base)
 * \brief Function that checks whether or not the str passed as parameter
 * has a proprer syntax, coping it with operands and base.
 * \param str The expression which syntax has to be parsed.
 * \param operands The operands which are presumably contained in str.
 * \param base The numbers which are presumably contained in str.
 * \return An int telling wheter or not the syntax is correct.
 */

/** \file infin_add.h
 * \brief A Documented file.
 *
 * Details.
 */

/**
 * \fn int infin_add_wrapped(char **nb1, char **nb2, int size, char *result_string)
 * \brief Function wrapped by infin_add function remove minus and launch an add
 * if there is zero or two negative number and the sub otherwise.
 * \param nb1 The first number
 * \param nb2 The second number
 * \param size The size of the result string
 * \param result_string the result string pointer.
 * \return return a boolean about the result -1 if negative 1 if positive.
 */

 /**
 * \fn char *infin_add(char *nb1, char *nb2)
 * \brief Function that wrap infin_add_wrapped, compute the size of the result
 * string and allocate it, then free his params.
 * \param nb1 First number
 * \param nb2 Second number
 * \return return the result string of the addition of nb1 and nb2
 */

/**
 * \fn void add_it(char *number1, char *number2, char *result_string)
 * \brief Function key of the add system take a char and add it to the second.
 * \param number1 The first number.
 * \param number2 the Second number.
 * \param result_string The result string passed as argument
 */

/**
 * \fn int sub_it(char *bigger, char *lower, char *result_string, int signe)
 * \brief Function that wrap the key function of sub system, compute the size
 * of the two params and launch the subsub function.
 * \param bigger The biggest number
 * \param lower The lowest number
 * \param result_string The result pointer
 * \param signe The signe of the result.
 * \return return a boolean -1 negative 1 positive
 */


/**
 * \f int test_signe(char *str)
 * \brief Function that test the signe of a str nbr.
 * \param str The nbr in string that you want to test.
 * \return return 0;
 */

/**
 * \fn void size_post(int *size1, int *size2)
 * \brief Function that decreament two numbers.
 * \param size1 number 1
 * \param size2 number 2.
 */

/**
 * \fn void subsub(char **s, int bi_s, int low_s, int cr_nb)
 * \brief Function key of the sub system, wrapped by sub_it
 * function.
 * \param s tab of string { number 1, number 2, result}
 * \param bi_s Size of the biggest number
 * \param low_s Size of the lowest number
 * \param cr_nb The number actually verified.
 * \return return void.
 */

/** \file infin_div.h
 * \brief A Documented file.
 *
 * Details.
 */

/**
 * \fn char *infin_div (char *str1, char *str2)
 * \brief Function that divides two string numbers and returns the quotient.
 * \param str1 The dividend of the division
 * \param str2 The divisor of the division
 * \return The quotient as a string number.
 */

/** \file infin_mod.h
 * \brief A Documented file.
 *
 * Details.
 */

/**
 * \fn char *infin_mod (char *str1, char *str2)
 * \brief Function that returns the modulo of two string number, the remainder
 * of the euclidean division of those two number
 * \param str1 The dividend of the division which remainder will be returned.
 * \param str2 The divisor of the division which remainder will be returned.
 * \return The remainder of the euclidean division of str1 and str2.
 */
